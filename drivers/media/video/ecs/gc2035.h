#ifndef GC2035_H_
#define GC2035_H_

#include <linux/types.h>
#include <media/v4l2-common.h>
#include <media/soc_camera.h>
#include <mach/camera.h>
#include "ecs-subdev.h"

char *gc2035_get_profile(const struct i2c_client *client);
static int gc2035_g_frame_interval(struct v4l2_subdev *sd, \
				struct v4l2_subdev_frame_interval *inter);

/********************************Register lists********************************/
static struct reg_tab_bb gc2035_init_req[] = {
	{0xfe, 0x80},
};

static struct reg_tab_bb gc2035_init_done[] = {
	{0xfe, 0x80},
	{0xfe, 0x80},
	{0xfe, 0x80},
	{0xfc, 0x06},
	{0xf9, 0xfe},
	{0xfa, 0x00},
	{0xf6, 0x00},

	{0xf7, 0x05},
	{0xf8, 0x84},

	{0xfe, 0x00},
	{0x82, 0x00},
	{0xb3, 0x60},
	{0xb4, 0x40},
	{0xb5, 0x60},
	{0x03, 0x02},
	{0x04, 0xda},

	{0xfe, 0x00},
	{0xec, 0x06},
	{0xed, 0x06},
	{0xee, 0x62},
	{0xef, 0x92},

	{0x0a, 0x00},
	{0x0c, 0x00},
	{0x0d, 0x04},
	{0x0e, 0xc0},
	{0x0f, 0x06},
	{0x10, 0x58},
	{0x17, 0x14},
	{0x18, 0x0e},
	{0x19, 0x0c},
	{0x1a, 0x01},
	{0x1b, 0x8b},
	{0x1e, 0x88},
	{0x1f, 0x08},
	{0x20, 0x05},
	{0x21, 0x0f},
	{0x22, 0xf0},
	{0x23, 0xc3},
	{0x24, 0x17},
/*AEC*/
	{0xfe, 0x01},
	{0x11, 0x20},
	{0x1f, 0xc0},
	{0x20, 0x60},
	{0x47, 0x30},
	{0x0b, 0x10},
	{0x13, 0x75},

	{0xfe, 0x00},
	{0x05, 0x01},
	{0x06, 0x28},
	{0x07, 0x00},
	{0x08, 0xf0},
	{0xfe, 0x01},
	{0x27, 0x00},
	{0x28, 0xf0},
	{0x29, 0x03},
	{0x2a, 0xc0},
	{0x2b, 0x03},
	{0x2c, 0xc0},
	{0x2d, 0x03},
	{0x2e, 0xc0},
	{0x2f, 0x03},
	{0x30, 0xc0},
	{0x3e, 0x00},
	{0xfe, 0x00},

	{0xb6, 0x03},
	{0xfe, 0x00},
	{0x3f, 0x00},
	{0x40, 0x77},
	{0x42, 0x7f},
	{0x43, 0x30},
	{0x5c, 0x08},
	{0x5e, 0x20},
	{0x5f, 0x20},
	{0x60, 0x20},
	{0x61, 0x20},
	{0x62, 0x20},
	{0x63, 0x20},
	{0x64, 0x20},
	{0x65, 0x20},

	{0x80, 0xff},
	{0x81, 0x26},
	{0x87, 0x90},
	{0x84, 0x01},
	{0x86, 0x06},
	{0x8b, 0xbc},
	{0xb0, 0x80},
	{0xc0, 0x40},
	{0xfe, 0x01},
	{0xc2, 0x2a},
	{0xc3, 0x1a},
	{0xc4, 0x16},
	{0xc8, 0x21},
	{0xc9, 0x1c},
	{0xca, 0x18},
	{0xbc, 0x46},
	{0xbd, 0x2a},
	{0xbe, 0x26},
	{0xb6, 0x35},
	{0xb7, 0x24},
	{0xb8, 0x1b},
	{0xc5, 0x00},
	{0xc6, 0x00},
	{0xc7, 0x00},
	{0xcb, 0x00},
	{0xcc, 0x00},
	{0xcd, 0x00},
	{0xbf, 0x0c},
	{0xc0, 0x12},
	{0xc1, 0x17},
	{0xb9, 0x00},
	{0xba, 0x00},
	{0xbb, 0x07},
	{0xaa, 0x1b},
	{0xab, 0x20},
	{0xac, 0x20},
	{0xad, 0x24},
	{0xae, 0x1f},
	{0xaf, 0x23},
	{0xb0, 0x20},
	{0xb1, 0x20},
	{0xb2, 0x20},
	{0xb3, 0x16},
	{0xb4, 0x1c},
	{0xb5, 0x16},
	{0xd0, 0x00},
	{0xd2, 0x00},
	{0xd3, 0x00},
	{0xd8, 0x00},
	{0xda, 0x00},
	{0xdb, 0x00},
	{0xdc, 0x00},
	{0xde, 0x00},
	{0xdf, 0x00},
	{0xd4, 0x00},
	{0xd6, 0x00},
	{0xd7, 0x0c},
	{0xa4, 0x00},
	{0xa5, 0x00},
	{0xa6, 0x00},
	{0xa7, 0x00},
	{0xa8, 0x00},
	{0xa9, 0x00},
	{0xa1, 0x80},
	{0xa2, 0x80},
	{0xfe, 0x02},
	{0xa4, 0x00},
	{0xfe, 0x00},
	{0xfe, 0x02},
	{0xc0, 0x01},
	{0xc1, 0x40},
	{0xc2, 0xfc},
	{0xc3, 0x05},
	{0xc4, 0xec},
	{0xc5, 0x42},
	{0xc6, 0xf8},
	{0xc7, 0x40},
	{0xc8, 0xf8},
	{0xc9, 0x06},
	{0xca, 0xfd},
	{0xcb, 0x3e},
	{0xcc, 0xf3},
	{0xcd, 0x36},
	{0xce, 0xf6},
	{0xcf, 0x04},
	{0xe3, 0x0c},
	{0xe4, 0x44},
	{0xe5, 0xe5},
	{0xfe, 0x00},
	{0xfe, 0x01},
	{0x4f, 0x00},
	{0x4d, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4d, 0x10},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4d, 0x20},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x80},
	{0x4e, 0x80},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4d, 0x30},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x04},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4d, 0x40},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x04},
	{0x4e, 0x04},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4d, 0x50},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x10},
	{0x4e, 0x00},
	{0x4e, 0x02},
	{0x4e, 0x02},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4d, 0x60},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x02},
	{0x4e, 0x02},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4d, 0x70},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4d, 0x80},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4d, 0x90},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x40},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4d, 0xa0},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4d, 0xb0},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4d, 0xc0},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4d, 0xd0},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4e, 0x00},
	{0x4f, 0x01},
	{0xfe, 0x01},
	{0x50, 0xc8},
	{0x52, 0x08},
	{0x56, 0x04},
	{0x57, 0x20},
	{0x58, 0x01},
	{0x5b, 0x02},
	{0x61, 0xaa},
	{0x62, 0xaa},
	{0x71, 0x00},
	{0x74, 0x10},
	{0x77, 0x08},
	{0x78, 0xfd},
	{0x80, 0x15},
	{0x84, 0x0a},
	{0x86, 0x10},
	{0x87, 0x00},
	{0x88, 0x06},
	{0x8a, 0xc0},
	{0x89, 0x75},
	{0x84, 0x08},
	{0x8b, 0x00},
	{0x8d, 0x70},
	{0x8e, 0x70},
	{0x8f, 0xf4},
	{0xfe, 0x00},
	{0x82, 0x02},
	{0xfe, 0x01},
	{0x21, 0xbf},
	{0xfe, 0x02},
	{0xa4, 0x00},
	{0xa5, 0x40},
	{0xa2, 0xa0},
	{0xa6, 0x80},
	{0xa7, 0x80},
	{0xab, 0x31},
	{0xa9, 0x6f},
	{0xb0, 0x99},
	{0xb1, 0x34},
	{0xb3, 0x80},
	{0xde, 0xb6},
	{0x38, 0x0f},
	{0x39, 0x60},
	{0xfe, 0x00},
	{0x81, 0x26},
	{0xfe, 0x02},
	{0x83, 0x00},
	{0x84, 0x45},
	{0xd1, 0x38},
	{0xd2, 0x38},
	{0xd3, 0x40},
	{0xd4, 0x80},
	{0xd5, 0x00},
	{0xdc, 0x30},
	{0xdd, 0xb8},
	{0xfe, 0x00},
	{0xfe, 0x02},
	{0x88, 0x15},
	{0x8c, 0xf6},
	{0x89, 0x03},
	{0xfe, 0x02},
	{0x90, 0x6c},
	{0x97, 0x45},
	{0xfe, 0x02},
	{0x15, 0x0a},
	{0x16, 0x12},
	{0x17, 0x19},
	{0x18, 0x1f},
	{0x19, 0x2c},
	{0x1a, 0x38},
	{0x1b, 0x42},
	{0x1c, 0x4e},
	{0x1d, 0x63},
	{0x1e, 0x76},
	{0x1f, 0x87},
	{0x20, 0x96},
	{0x21, 0xa2},
	{0x22, 0xb8},
	{0x23, 0xca},
	{0x24, 0xd8},
	{0x25, 0xe3},
	{0x26, 0xf0},
	{0x27, 0xf8},
	{0x28, 0xfd},
	{0x29, 0xff},
	{0xfe, 0x02},
	{0x2b, 0x00},
	{0x2c, 0x04},
	{0x2d, 0x09},
	{0x2e, 0x18},
	{0x2f, 0x27},
	{0x30, 0x37},
	{0x31, 0x49},
	{0x32, 0x5c},
	{0x33, 0x7e},
	{0x34, 0xa0},
	{0x35, 0xc0},
	{0x36, 0xe0},
	{0x37, 0xff},
	{0xfe, 0x00},
	{0x82, 0xfe},

/*mipi setting*/
	{0xf2, 0x00},
	{0xf3, 0x00},
	{0xf4, 0x00},
	{0xf5, 0x00},
	{0xfe, 0x01},
	{0x0b, 0x90},
	{0x87, 0x10},
	{0xfe, 0x00},

	{0xfe, 0x03},
	{0x01, 0x03},
	{0x02, 0x11},
	{0x03, 0x11},
	{0x06, 0x80},
	{0x11, 0x1E},
	{0x12, 0x80},
	{0x13, 0x0c},
	{0x15, 0x11},
	{0x04, 0x20},
	{0x05, 0x00},
	{0x17, 0x00},

	{0x21, 0x02},
	{0x29, 0x02},
	{0x2a, 0x03},
	{0x2b, 0x08},
};


static struct reg_tab_bb gc2035_stm_on[] = {
	{0xfe,	0x03},
	{0x10,	0x94},
	{0xfe,	0x00},
};

static struct reg_tab_bb gc2035_stm_off[] = {
	{0xfe,	0x03},
	{0x10,	0x00},
	{0xfe,	0x00},
};


static struct reg_tab_bb gc2035_fmt_yuyv[] = {
	{0xfe,	0x00},
	{0x84,	0x02},
};

static struct reg_tab_bb gc2035_fmt_yvyu[] = {
	{0xfe,	0x00},
	{0x84,	0x03},
};

static struct reg_tab_bb gc2035_fmt_uyvy[] = {
	{0xfe,	0x00},
	{0x84,	0x00},
};

static struct reg_tab_bb gc2035_fmt_vyuy[] = {
	{0xfe,	0x00},
	{0x84,	0x01},
};

static struct reg_tab_bb gc2035_res_qcif[] = {
	{0xc8, 0x00},

	{0x99, 0x99},
	{0x9a, 0x06},
	{0x9b, 0x02},
	{0x9c, 0x04},
	{0x9d, 0x00},
	{0x9e, 0x00},
	{0x9f, 0x02},
	{0xa0, 0x04},
	{0xa1, 0x00},
	{0xa2, 0x00},

	{0xfe, 0x00},
	{0x0a, 0x00},
	{0x0c, 0x00},
	{0x0d, 0x04},
	{0x0e, 0xc0},
	{0x0f, 0x06},
	{0x10, 0x58},
	{0x90, 0x01},
	{0x95, 0x00},
	{0x96, 0x90},
	{0x97, 0x00},
	{0x98, 0xb0},

	{0xfe, 0x03},
	{0x12, 0x60},
	{0x13, 0x01},
	{0x04, 0x80},
	{0x05, 0x00},
	{0xfe, 0x00},
	{0xfe, 0x00},
	{0x05, 0x01},
	{0x06, 0x28},
	{0x07, 0x00},
	{0x08, 0xf0},
	{0xfe, 0x01},
	{0x27, 0x00},
	{0x28, 0xf0},
	{0x29, 0x03},
	{0x2a, 0xc0},
	{0x2b, 0x03},
	{0x2c, 0xc0},
	{0x2d, 0x03},
	{0x2e, 0xc0},
	{0x2f, 0x03},
	{0x30, 0xc0},
	{0x3e, 0x00},
	{0xfe, 0x00},
	{0xf7, 0x05},
	{0xf8, 0x84},
};

static struct reg_tab_bb gc2035_res_hqvga[] = {
	{0xc8, 0x00},

	{0x99, 0x33},
	{0x9a, 0x06},
	{0x9b, 0x00},
	{0x9c, 0x00},
	{0x9d, 0x00},
	{0x9e, 0x00},
	{0x9f, 0x00},
	{0xa0, 0x00},
	{0xa1, 0x00},
	{0xa2, 0x00},

	{0xfe, 0x00},
	{0x0a, 0x00},
	{0x0c, 0x00},
	{0x0d, 0x04},
	{0x0e, 0xc0},
	{0x0f, 0x06},
	{0x10, 0x58},
	{0x90, 0x01},
	{0x95, 0x00},
	{0x96, 0xa0},
	{0x97, 0x00},
	{0x98, 0xf0},

	{0xfe, 0x03},
	{0x12, 0xe0},
	{0x13, 0x01},
	{0x04, 0xb0},
	{0x05, 0x00},
	{0xfe, 0x00},
	{0xfe, 0x00},
	{0x05, 0x01},
	{0x06, 0x28},
	{0x07, 0x00},
	{0x08, 0xf0},
	{0xfe, 0x01},
	{0x27, 0x00},
	{0x28, 0xf0},
	{0x29, 0x03},
	{0x2a, 0xc0},
	{0x2b, 0x03},
	{0x2c, 0xc0},
	{0x2d, 0x03},
	{0x2e, 0xc0},
	{0x2f, 0x03},
	{0x30, 0xc0},
	{0x3e, 0x00},
	{0xfe, 0x00},
	{0xf7, 0x05},
	{0xf8, 0x84},
};

static struct reg_tab_bb gc2035_res_qvga[] = {
	{0xc8, 0x15},

	{0x99, 0x22},
	{0x9a, 0x06},
	{0x9b, 0x00},
	{0x9c, 0x00},
	{0x9d, 0x00},
	{0x9e, 0x00},
	{0x9f, 0x00},
	{0xa0, 0x00},
	{0xa1, 0x00},
	{0xa2, 0x00},

	{0xfe, 0x00},
	{0x0a, 0x00},
	{0x0c, 0x00},
	{0x0d, 0x04},
	{0x0e, 0xc0},
	{0x0f, 0x06},
	{0x10, 0x58},
	{0x90, 0x01},
	{0x95, 0x00},
	{0x96, 0xf0},
	{0x97, 0x01},
	{0x98, 0x40},

	{0xfe, 0x03},
	{0x12, 0x80},
	{0x13, 0x02},
	{0x04, 0x20},
	{0x05, 0x01},
	{0xfe, 0x00},
	{0xfe, 0x00},
	{0x05, 0x01},
	{0x06, 0x28},
	{0x07, 0x00},
	{0x08, 0xf0},
	{0xfe, 0x01},
	{0x27, 0x00},
	{0x28, 0xf0},
	{0x29, 0x03},
	{0x2a, 0xc0},
	{0x2b, 0x03},
	{0x2c, 0xc0},
	{0x2d, 0x03},
	{0x2e, 0xc0},
	{0x2f, 0x03},
	{0x30, 0xc0},
	{0x3e, 0x00},
	{0xfe, 0x00},
	{0xf7, 0x05},
	{0xf8, 0x84},
};

static struct reg_tab_bb gc2035_res_cif[] = {
	{0xc8, 0x14},

	{0xfa, 0x11},
	{0x99, 0x22},
	{0x9a, 0x06},
	{0x9b, 0x00},
	{0x9c, 0x00},
	{0x9d, 0x00},
	{0x9e, 0x00},
	{0x9f, 0x00},
	{0xa0, 0x00},
	{0xa1, 0x00},
	{0xa2, 0x00},

	{0xfe, 0x00},
	{0x0a, 0x00},
	{0x0c, 0x00},
	{0x0d, 0x04},
	{0x0e, 0xc0},
	{0x0f, 0x06},
	{0x10, 0x58},
	{0x90, 0x01},
	{0x95, 0x01},
	{0x96, 0x20},
	{0x97, 0x01},
	{0x98, 0x60},

	{0xfe, 0x03},
	{0x12, 0xc0},
	{0x13, 0x02},
	{0x04, 0x20},
	{0x05, 0x01},
	{0xfe, 0x00},
	{0xfe, 0x00},
	{0x05, 0x01},
	{0x06, 0x28},
	{0x07, 0x00},
	{0x08, 0xf0},
	{0xfe, 0x01},
	{0x27, 0x00},
	{0x28, 0xf0},
	{0x29, 0x03},
	{0x2a, 0xc0},
	{0x2b, 0x03},
	{0x2c, 0xc0},
	{0x2d, 0x03},
	{0x2e, 0xc0},
	{0x2f, 0x03},
	{0x30, 0xc0},
	{0x3e, 0x00},
	{0xfe, 0x00},
	{0xf7, 0x05},
	{0xf8, 0x84},
};

static struct reg_tab_bb gc2035_res_vga[] = {
	{0xc8, 0x00},

	{0xfa, 0x11},
	{0x99, 0x22},
	{0x9a, 0x06},
	{0x9b, 0x00},
	{0x9c, 0x00},
	{0x9d, 0x00},
	{0x9e, 0x00},
	{0x9f, 0x00},
	{0xa0, 0x00},
	{0xa1, 0x00},
	{0xa2, 0x00},
	{0xfe, 0x00},
	{0x0a, 0x00},
	{0x0c, 0x00},
	{0x0d, 0x04},
	{0x0e, 0xc0},
	{0x0f, 0x06},
	{0x10, 0x58},

	{0x90, 0x01},
	{0x95, 0x01},
	{0x96, 0xe0},
	{0x97, 0x02},
	{0x98, 0x80},

	{0xfe, 0x03},
	{0x12, 0x00},
	{0x13, 0x05},
	{0x04, 0x90},
	{0x05, 0x01},
	{0xfe, 0x00},
	{0xfe, 0x00},
	{0x05, 0x01},
	{0x06, 0x28},
	{0x07, 0x00},
	{0x08, 0xf0},
	{0xfe, 0x01},
	{0x27, 0x00},
	{0x28, 0xf0},
	{0x29, 0x03},
	{0x2a, 0xc0},
	{0x2b, 0x03},
	{0x2c, 0xc0},
	{0x2d, 0x03},
	{0x2e, 0xc0},
	{0x2f, 0x03},
	{0x30, 0xc0},
	{0x3e, 0x00},
	{0xfe, 0x00},
	{0xf7, 0x05},
	{0xf8, 0x84},
};

static struct reg_tab_bb gc2035_res_720p[] = {
	{0xc8, 0x00},

	{0xfa, 0x11},
	{0x99, 0x11},
	{0x9a, 0x06},
	{0x9b, 0x00},
	{0x9c, 0x00},
	{0x9d, 0x00},
	{0x9e, 0x00},
	{0x9f, 0x00},
	{0xa0, 0x00},
	{0xa1, 0x00},
	{0xa2, 0x00},

	{0xfe, 0x00},
	{0x0a, 0xf0},
	{0x0c, 0xa0},
	{0x0d, 0x02},
	{0x0e, 0xd8},
	{0x0f, 0x05},
	{0x10, 0x18},
	{0x90, 0x01},
	{0x95, 0x02},
	{0x96, 0xd0},
	{0x97, 0x05},
	{0x98, 0x00},

	{0xfe, 0x03},
	{0x04, 0x20},
	{0x05, 0x00},
	{0x12, 0x00},
	{0x13, 0x0a},
	{0xfe, 0x00},

	{0xf7, 0x05},
	{0xf8, 0x89},
	{0xfe, 0x00},
	{0x05, 0x02},
	{0x06, 0x34},
	{0x07, 0x00},
	{0x08, 0x1e},
	{0xfe, 0x01},
	{0x27, 0x00},
	{0x28, 0x96},
	{0x29, 0x02},
	{0x2a, 0xee},
	{0x2b, 0x02},
	{0x2c, 0xee},
	{0x2d, 0x02},
	{0x2e, 0xee},
	{0x2f, 0x02},
	{0x30, 0xee},
	{0x3e, 0x00},
	{0xfe, 0x00},
};

static struct reg_tab_bb gc2035_res_uxga[] = {
	{0xc8, 0x00},

	{0xfa, 0x11},
	{0x99, 0x11},
	{0x9a, 0x06},
	{0x9b, 0x00},
	{0x9c, 0x00},
	{0x9d, 0x00},
	{0x9e, 0x00},
	{0x9f, 0x00},
	{0xa0, 0x00},
	{0xa1, 0x00},
	{0xa2, 0x00},

	{0xfe, 0x00},
	{0x0a, 0x00},
	{0x0c, 0x00},
	{0x0d, 0x04},
	{0x0e, 0xc0},
	{0x0f, 0x06},

	{0x10, 0x58},
	{0x90, 0x01},
	{0x95, 0x04},
	{0x96, 0xb0},
	{0x97, 0x06},
	{0x98, 0x40},

	{0xfe, 0x03},
	{0x12, 0x80},
	{0x13, 0x0c},
	{0x04, 0x20},
	{0x05, 0x00},
	{0xfe, 0x00},

	{0xfe, 0x00},
	{0x05, 0x01},
	{0x06, 0x28},
	{0x07, 0x00},
	{0x08, 0xf0},
	{0xfe, 0x01},
	{0x27, 0x00},
	{0x28, 0xf0},
	{0x29, 0x03},
	{0x2a, 0xc0},
	{0x2b, 0x03},
	{0x2c, 0xc0},
	{0x2d, 0x03},
	{0x2e, 0xc0},
	{0x2f, 0x03},
	{0x30, 0xc0},
	{0x3e, 0x00},
	{0xfe, 0x00},
	{0xf7, 0x05},
	{0xf8, 0x84},
};

/*interface for mipi setting, based on 24MHz MCLK */
static __attribute__((unused)) struct reg_tab_bb gc2035_mipi_24m_ld[] = {
};

static __attribute__((unused)) struct reg_tab_bb gc2035_mipi_24m_full[] = {
};

/**************************** register section end ****************************/

enum {
	GC2035_PROP_INIT = 0,		/* Initialize sequence */
	GC2035_PROP_STM,		/* Stream on/off */
	GC2035_PROP_FMT,		/* Output format */
	GC2035_PROP_RES,		/* Output resolution */
	GC2035_PROP_IF,		/* Interface behavior: a sensor output should be
				 * either MIPI or DVP, so MIPI and DVP share the
				 * same property ID */
	GC2035_PROP_MIPI = GC2035_PROP_IF,	/* MIPI interface behavior */
	GC2035_PROP_DVP = GC2035_PROP_IF,	/* DVP interface behavior */
	GC2035_PROP_END,
};

enum {	/* all register */
	GC2035_INIT_REQ	= 0,
	GC2035_INIT_DONE,
	GC2035_INIT_END,	/* don't use it*/
};

enum {
	GC2035_STM_OFF	= 0,
	GC2035_STM_ON,
	GC2035_STM_END,	/* don't use it*/
};

enum {
	GC2035_FMT_YUYV	= 0,
	GC2035_FMT_YVYU,
	GC2035_FMT_UYVY,
	GC2035_FMT_VYUY,
	GC2035_FMT_END,	/* don't use it*/
};

enum {	/* P0:0x90~0x98 */
	GC2035_RES_QCIF = 0,
	GC2035_RES_HQVGA,
	GC2035_RES_QVGA,
	GC2035_RES_CIF,
	GC2035_RES_VGA,
	GC2035_RES_720P,
	GC2035_RES_UXGA,
	GC2035_RES_END,	/* don't use it*/
};

enum {	/* P3:021x~0x2b */
	GC2035_IF_LD	= 0,
	GC2035_IF_FULL,
	GC2035_IF_END,

	GC2035_MIPI_LD		= GC2035_IF_LD,
	GC2035_MIPI_FULL	= GC2035_IF_FULL,
	GC2035_MIPI_END		= GC2035_IF_END,	/* don't use it*/
};

enum {	/* 0x4800~0x48FF */
	GC2035_ST_INVALID	= 0, /* place holder, don't use 0 as state id*/
	GC2035_ST_UYVY_QCIF,
	GC2035_ST_UYVY_HQVGA,
	GC2035_ST_UYVY_QVGA,
	GC2035_ST_UYVY_CIF,
	GC2035_ST_UYVY_VGA,
	GC2035_ST_UYVY_720P,
	GC2035_ST_UYVY_UXGA,
	GC2035_ST_END,	/* don't use it*/
};

static struct ecs_default_fmt_info gc2035_fmt_info_table[] = {
	[GC2035_FMT_YUYV] = {
		.code	= V4L2_MBUS_FMT_YUYV8_2X8,
		.clrspc	= V4L2_COLORSPACE_JPEG,
		.fourcc	= V4L2_PIX_FMT_YUYV,
	},
	[GC2035_FMT_YVYU] = {
		.code	= V4L2_MBUS_FMT_YVYU8_2X8,
		.clrspc	= V4L2_COLORSPACE_JPEG,
		.fourcc	= V4L2_PIX_FMT_YVYU,
	},
	[GC2035_FMT_UYVY] = {
		.code	= V4L2_MBUS_FMT_UYVY8_2X8,
		.clrspc	= V4L2_COLORSPACE_JPEG,
		.fourcc	= V4L2_PIX_FMT_UYVY,
	},
	[GC2035_FMT_VYUY] = {
		.code	= V4L2_MBUS_FMT_VYUY8_2X8,
		.clrspc	= V4L2_COLORSPACE_JPEG,
		.fourcc	= V4L2_PIX_FMT_VYUY,
	},
};

static struct ecs_default_res_info gc2035_res_info_table[] = {
	[GC2035_RES_QCIF] = {
		.h_act = 176,
		.v_act = 144,
	},
	[GC2035_RES_HQVGA] = {
		.h_act = 240,
		.v_act = 160,
	},
	[GC2035_RES_QVGA] = {
		.h_act = 320,
		.v_act = 240,
	},
	[GC2035_RES_CIF] = {
		.h_act = 352,
		.v_act = 288,
	},
	[GC2035_RES_VGA] = {
		.h_act = 640,
		.v_act = 480,
	},
	[GC2035_RES_720P] = {
		.h_act = 1280,
		.v_act = 720,
	},
	[GC2035_RES_UXGA] = {
		.h_act = 1600,
		.v_act = 1200,
	},
};

static struct csi_dphy_desc gc2035_mipi_24m_info_table[] = {
	[GC2035_MIPI_LD] = { /* Controller config for low defination YUV */
		.clk_mul	= 32,
		.clk_div	= 4,
		.hs_prepare	= 27,	/* time count in clock period */
		.hs_zero	= 53,	/* time count in clock period */
		.nr_lane	= 1,
	},
	[GC2035_MIPI_FULL] = { /* FULL */
		.clk_mul	= 32,
		.clk_div	= 4,
		.hs_prepare	= 27,	/* time count in clock period */
		.hs_zero	= 53,	/* time count in clock period */
		.nr_lane	= 1,
	},
};

#define GC2035_DECLARE_INIT_SETTING(VAL, val) \
	__DECLARE_SETTING(GC2035, gc2035, INIT, init, VAL, val)
static struct ecs_setting gc2035_init_stn_table[GC2035_INIT_END] = {
	GC2035_DECLARE_INIT_SETTING(REQ, req),
	GC2035_DECLARE_INIT_SETTING(DONE, done),
};

#define GC2035_DECLARE_STM_SETTING(VAL, val) \
	__DECLARE_SETTING(GC2035, gc2035, STM, stm, VAL, val)
static struct ecs_setting gc2035_stm_stn_table[GC2035_STM_END] = {
	GC2035_DECLARE_STM_SETTING(OFF, off),
	GC2035_DECLARE_STM_SETTING(ON, on),
};

#define GC2035_DECLARE_FMT_SETTING(VAL, val) \
	__DECLARE_SETTING_VS_INFO(GC2035, gc2035, FMT, fmt, VAL, val)
static struct ecs_setting gc2035_fmt_stn_table[GC2035_FMT_END] = {
	GC2035_DECLARE_FMT_SETTING(YUYV, yuyv),
	GC2035_DECLARE_FMT_SETTING(YVYU, yvyu),
	GC2035_DECLARE_FMT_SETTING(UYVY, uyvy),
	GC2035_DECLARE_FMT_SETTING(VYUY, vyuy),
};

#define GC2035_DECLARE_RES_SETTING(VAL, val) \
	__DECLARE_SETTING_VS_INFO(GC2035, gc2035, RES, res, VAL, val)
static struct ecs_setting gc2035_res_stn_table[GC2035_RES_END] = {
	GC2035_DECLARE_RES_SETTING(QCIF,	qcif),
	GC2035_DECLARE_RES_SETTING(HQVGA,	hqvga),
	GC2035_DECLARE_RES_SETTING(QVGA,	qvga),
	GC2035_DECLARE_RES_SETTING(CIF,		cif),
	GC2035_DECLARE_RES_SETTING(VGA,		vga),
	GC2035_DECLARE_RES_SETTING(720P,	720p),
	GC2035_DECLARE_RES_SETTING(UXGA,	uxga),
};

#define GC2035_DECLARE_MIPI_24M_SETTING(VAL, val) \
	__DECLARE_SETTING_VS_INFO(GC2035, gc2035, MIPI, mipi_24m, VAL, val)
static struct ecs_setting gc2035_mipi_stn_table[GC2035_MIPI_END] = {
	GC2035_DECLARE_MIPI_24M_SETTING(LD, ld),
	GC2035_DECLARE_MIPI_24M_SETTING(FULL, full),
};

static struct ecs_property gc2035_property_table[GC2035_PROP_END] = {
	[GC2035_PROP_INIT] = {
		.name		= "INITIALIZE",
		.id		= GC2035_PROP_INIT,
		.stn_tab	= gc2035_init_stn_table,
		.stn_num	= GC2035_INIT_END,
		.reg_low	= 0,
		.reg_high	= 0,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
	[GC2035_PROP_STM] = {
		.name		= "STREAM",
		.id		= GC2035_PROP_STM,
		.stn_tab	= gc2035_stm_stn_table,
		.stn_num	= GC2035_STM_END,
		.reg_low	= 0,
		.reg_high	= 0,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
	[GC2035_PROP_FMT] = {
		.name		= "FORMAT",
		.id		= GC2035_PROP_FMT,
		.stn_tab	= gc2035_fmt_stn_table,
		.stn_num	= GC2035_FMT_END,
		.reg_low	= 0,
		.reg_high	= 0,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
	[GC2035_PROP_RES] = {
		.name		= "RESOLUTION",
		.id		= GC2035_PROP_RES,
		.stn_tab	= gc2035_res_stn_table,
		.stn_num	= GC2035_RES_END,
		.reg_low	= 0,
		.reg_high	= 0,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
	[GC2035_PROP_IF] = {
		.name		= "INTERFACE",
		.id		= GC2035_PROP_IF,
		.stn_tab	= NULL,
		.stn_num	= GC2035_IF_END,
		.reg_low	= 0,
		.reg_high	= 0,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
};

/*********************************** state ***********************************/
/* Default global init sequence */
static struct ecs_state_cfg gc2035_state_uyvy_qcif[] = {
	{GC2035_PROP_FMT,	GC2035_FMT_UYVY},
	{GC2035_PROP_RES,	GC2035_RES_QCIF},
	{GC2035_PROP_IF,	GC2035_IF_LD},
};

static struct ecs_state_cfg gc2035_state_uyvy_hqvga[] = {
	{GC2035_PROP_FMT,	GC2035_FMT_UYVY},
	{GC2035_PROP_RES,	GC2035_RES_HQVGA},
	{GC2035_PROP_IF,	GC2035_IF_LD},
};

static struct ecs_state_cfg gc2035_state_uyvy_qvga[] = {
	{GC2035_PROP_FMT,	GC2035_FMT_UYVY},
	{GC2035_PROP_RES,	GC2035_RES_QVGA},
	{GC2035_PROP_IF,	GC2035_IF_LD},
};

static struct ecs_state_cfg gc2035_state_uyvy_cif[] = {
	{GC2035_PROP_FMT,	GC2035_FMT_UYVY},
	{GC2035_PROP_RES,	GC2035_RES_CIF},
	{GC2035_PROP_IF,	GC2035_IF_LD},
};

static struct ecs_state_cfg gc2035_state_uyvy_vga[] = {
	{GC2035_PROP_FMT,	GC2035_FMT_UYVY},
	{GC2035_PROP_RES,	GC2035_RES_VGA},
	{GC2035_PROP_IF,	GC2035_IF_LD},
};

static struct ecs_state_cfg gc2035_state_uyvy_720p[] = {
	{GC2035_PROP_FMT,	GC2035_FMT_UYVY},
	{GC2035_PROP_RES,	GC2035_RES_720P},
	{GC2035_PROP_IF,	GC2035_IF_FULL},
};

static struct ecs_state_cfg gc2035_state_uyvy_uxga[] = {
	{GC2035_PROP_FMT,	GC2035_FMT_UYVY},
	{GC2035_PROP_RES,	GC2035_RES_UXGA},
	{GC2035_PROP_IF,	GC2035_IF_FULL},
};

#define GC2035_DECLARE_STATE(VAL, val) \
	__DECLARE_STATE(GC2035, gc2035, VAL, val)
static struct ecs_state gc2035_state_table[GC2035_ST_END] = {
	GC2035_DECLARE_STATE(UYVY_QCIF, uyvy_qcif),
	GC2035_DECLARE_STATE(UYVY_HQVGA, uyvy_hqvga),
	GC2035_DECLARE_STATE(UYVY_QVGA, uyvy_qvga),
	GC2035_DECLARE_STATE(UYVY_CIF, uyvy_cif),
	GC2035_DECLARE_STATE(UYVY_VGA, uyvy_vga),
	GC2035_DECLARE_STATE(UYVY_720P, uyvy_720p),
	GC2035_DECLARE_STATE(UYVY_UXGA, uyvy_uxga),
};

static struct x_i2c gc2035_xic = {
	.ident_addr	= {0xf0, 0xf1},
	.ident_mask	= {0xFF, 0xFF},
	.ident_data	= {0x20, 0x35},
	.ident_regs	= 2,
	.reset_addr	= 0xfe,
	.reset_mask	= 0x80,
	.read		= xic_read_bb,
	.write		= xic_write_bb,
	.write_array	= xic_write_array_bb,
	.write_burst	= xic_write_burst_bb,
	.detect		= xic_detect_bb,
};

/* This struct is acually the code to instantize ECS to gc2035 driver */
static struct ecs_sensor generic_gc2035 = {
	.name		= "gc2035",
	.speculate	= 1,
	.prop_tab	= gc2035_property_table,
	.prop_num	= GC2035_PROP_END,
	.state_tab	= gc2035_state_table,
	.state_num	= GC2035_ST_END,
	.state_now	= UNSET,
	.hw_ctx		= &gc2035_xic,
};

/* x_subdev related */
/* The supported format*resolutions mapping table */
static struct v4l2_mbus_framefmt gc2035_fmt_map[GC2035_ST_END];
static int gc2035_enum_map[GC2035_FMT_END * 2];

struct v4l2_subdev_video_ops gc2035_video_ops = {
	.g_frame_interval	= gc2035_g_frame_interval,
};

struct v4l2_subdev_ops gc2035_ops = {
	.video	= &gc2035_video_ops,
};

static struct x_subdev gc2035_xsd = {
	.ecs		= &generic_gc2035,
	.ops		= &gc2035_ops,	/* Contain specialized functions only */
	.cid_list	= NULL,
	.cid_cnt	= 0,
	.state_map	= gc2035_fmt_map,
	.enum_map	= gc2035_enum_map,
	.profile	= -1,
	.init_id	= GC2035_PROP_INIT,
	.fmt_id		= GC2035_PROP_FMT,
	.res_id		= GC2035_PROP_RES,
	.str_id		= GC2035_PROP_STM,
	.ifc_id		= GC2035_PROP_IF,
	.get_profile	= &gc2035_get_profile,
	.get_fmt_code	= &xsd_default_get_fmt_code,
	.get_res_desc	= &xsd_default_get_res_desc,
	.get_mbus_cfg	= (int (*)(void *, struct v4l2_mbus_config *))\
				&csi2phy_desc_to_mbus_cfg,
};

/********************** platform specific configuration **********************/

static struct ecs_property pxa98x_spec_prop[] = {
	{
		.name		= "MIPI",
		.id		= GC2035_PROP_MIPI,
		.stn_tab	= gc2035_mipi_stn_table,
		.stn_num	= GC2035_MIPI_END,
		.speculate	= 1,
	},
};

static struct ecs_sensor pxa98x_spec = {
	.name		= "pxa98x specific settings",
	.prop_tab	= pxa98x_spec_prop,
	.prop_num	= ARRAY_SIZE(pxa98x_spec_prop),
};

static __attribute__((unused)) int pxa98x_state_list[] = {
	GC2035_ST_UYVY_QCIF,
	GC2035_ST_UYVY_HQVGA,
	GC2035_ST_UYVY_QVGA,
	GC2035_ST_UYVY_CIF,
	GC2035_ST_UYVY_VGA,
	GC2035_ST_UYVY_720P,
	GC2035_ST_UYVY_UXGA,
};

struct xsd_spec_item gc2035_spec_list[] = {
	{
		.name		= "pxa98x-mipi",
		.state_list	= pxa98x_state_list,
		.state_cnt	= ARRAY_SIZE(pxa98x_state_list),
		.ecs		= &pxa98x_spec,
	},
};

/************************* Finally the big data boss *************************/
static const struct xsd_driver_id gc2035_drv_table[] = {
	{
		.name		= "gc2035",
		.prototype	= &gc2035_xsd,
		.spec_list	= gc2035_spec_list,
		.spec_cnt	= ARRAY_SIZE(gc2035_spec_list),
	},
	/* TODO: add more driver structure above this end mark */
	{},
};

#endif
