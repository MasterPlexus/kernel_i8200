#ifndef GC0328_H_
#define GC0328_H_

#include <linux/types.h>
#include <media/v4l2-common.h>
#include <mach/camera.h>
#include "ecs-subdev.h"


/********************************Register lists********************************/


static struct reg_tab_bb gc0328_init_req[] = {
	{0xfe, 0x80},
};

static struct reg_tab_bb gc0328_init_done[] = {
	{0xfe, 0x80},
	{0xfe, 0x80},
	{0xfc, 0x16},
	{0xfc, 0x16},
	{0xfc, 0x16},
	{0xfc, 0x16},

	{0x4f, 0x01},

	{0xfe, 0x01},
	{0x4f, 0x00},
	{0x4c, 0x01},
	{0xfe, 0x00},

	{0xfe, 0x01},
	{0x51, 0x80},
	{0x52, 0x12},
	{0x53, 0x80},
	{0x54, 0x60},
	{0x55, 0x01},
	{0x56, 0x00},
	{0x5b, 0x02},
	{0xb1, 0xdc},
	{0xb2, 0xdc},
	{0x7c, 0x71},
	{0x7d, 0x10},
	{0x76, 0x8f},

	{0x50, 0x80},
	{0x4f, 0x00},
	{0x4d, 0x36},
	{0x4e, 0x02},
	{0x4e, 0x02},
	{0x4d, 0x44},
	{0x4e, 0x04},
	{0x4e, 0x04},
	{0x4d, 0x53},
	{0x4e, 0x08},
	{0x4d, 0x64},
	{0x4e, 0x08},
	{0x4d, 0x73},
	{0x4e, 0x20},
	{0x4f, 0x01},
	{0xfe, 0x00},

	{0x27, 0xf7},
	{0x28, 0x7F},
	{0x29, 0x20},
	{0x33, 0x20},
	{0x34, 0x20},
	{0x35, 0x20},
	{0x36, 0x20},
	{0x32, 0x08},
	{0x47, 0x00},
	{0x48, 0x00},
	{0xfe, 0x00},
	{0x06, 0x80},
	{0x0d, 0x01},
	{0x0e, 0xe8},
	{0x0f, 0x02},
	{0x10, 0x88},
	{0x09, 0x00},
	{0x0a, 0x00},
	{0x0b, 0x00},
	{0x0c, 0x00},
	{0x16, 0x00},
	{0x17, 0x17},
	{0x18, 0x0e},
	{0x19, 0x06},

	{0x1b, 0x48},
	{0x1f, 0xC8},
	{0x20, 0x01},
	{0x21, 0x78},
	{0x22, 0xb0},
	{0x24, 0x15},
	{0x26, 0x00},
	{0x50, 0x01},
	{0x70, 0x45},

	{0x40, 0x7f},
	{0x41, 0x24},
	{0x42, 0xff},
	{0x45, 0x00},
	{0x44, 0x00},
	{0x46, 0x02},

	{0x4b, 0x01},
	{0x50, 0x01},

	{0x7e, 0x0a},
	{0x7f, 0x03},
	{0x81, 0x15},
	{0x82, 0x85},
	{0x83, 0x02},
	{0x84, 0xe5},
	{0x90, 0xac},
	{0x92, 0x02},
	{0x94, 0x02},
	{0x95, 0x43},
	{0xd1, 0x38},
	{0xd2, 0x38},
	{0xdd, 0x78},
	{0xde, 0x38},
	{0xe4, 0x88},
	{0xe5, 0x40},
	{0xd7, 0x0e},

	{0xBF, 0x0E},
	{0xc0, 0x1C},
	{0xc1, 0x34},
	{0xc2, 0x48},
	{0xc3, 0x5A},
	{0xc4, 0x6B},
	{0xc5, 0x7B},
	{0xc6, 0x95},
	{0xc7, 0xAB},
	{0xc8, 0xBF},
	{0xc9, 0xCE},
	{0xcA, 0xD9},
	{0xcB, 0xE4},
	{0xcC, 0xEC},
	{0xcD, 0xF7},
	{0xcE, 0xFD},
	{0xcF, 0xFF},

	{0xfe, 0x00},
	{0x63, 0x00},
	{0x64, 0x05},
	{0x65, 0x0b},
	{0x66, 0x19},
	{0x67, 0x2e},
	{0x68, 0x40},
	{0x69, 0x54},
	{0x6a, 0x66},
	{0x6b, 0x86},
	{0x6c, 0xa7},
	{0x6d, 0xc6},
	{0x6e, 0xe4},
	{0x6f, 0xff},

	{0xfe, 0x01},
	{0x18, 0x02},

	{0xfe, 0x00},

	{0x98, 0x00},
	{0x9b, 0x20},
	{0x9c, 0x80},
	{0xa4, 0x10},
	{0xa8, 0x80},

	{0xa2, 0x23},
	{0xad, 0x01},

	{0xfe, 0x01},
	{0x9c, 0x02},
	{0x08, 0xa0},
	{0x09, 0xe8},

	{0x10, 0x08},

	{0x11, 0x91},
	{0x12, 0x10},
	{0x13, 0x45},
	{0x15, 0xfc},
	{0x21, 0xc0},
	{0x22, 0x60},
	{0x23, 0x30},
	{0x25, 0x00},
	{0x24, 0x14},

	{0x29, 0x00},
	{0x2a, 0x96},
	{0x2b, 0x01},
	{0x2c, 0xc2},
	{0x2d, 0x03},
	{0x2e, 0x84},
	{0x2d, 0x03},
	{0x2e, 0x84},
	{0x2f, 0x07},
	{0x30, 0x08},
	{0x31, 0x07},
	{0x32, 0x08},

	{0xfe, 0x01},
	{0xc0, 0x0d},
	{0xc1, 0x0c},
	{0xc2, 0x09},
	{0xc6, 0x0d},
	{0xc7, 0x0a},
	{0xc8, 0x06},
	{0xba, 0x1f},
	{0xbb, 0x1e},
	{0xbc, 0x1a},
	{0xb4, 0x19},
	{0xb5, 0x16},
	{0xb6, 0x10},
	{0xc3, 0x00},
	{0xc4, 0x00},
	{0xc5, 0x00},
	{0xc9, 0x00},
	{0xca, 0x00},
	{0xcb, 0x00},
	{0xbd, 0x06},
	{0xbe, 0x00},
	{0xbf, 0x04},
	{0xb7, 0x04},
	{0xb8, 0x03},
	{0xb9, 0x08},
	{0xa8, 0x08},
	{0xa9, 0x00},
	{0xaa, 0x00},
	{0xab, 0x02},
	{0xac, 0x00},
	{0xad, 0x03},
	{0xae, 0x0e},
	{0xaf, 0x03},
	{0xb0, 0x03},
	{0xb1, 0x07},
	{0xb2, 0x00},
	{0xb3, 0x09},
	{0xa4, 0x00},
	{0xa5, 0x00},
	{0xa6, 0x00},
	{0xa7, 0x00},
	{0xa1, 0x3c},
	{0xa2, 0x50},
	{0xfe, 0x00},

	{0xB1, 0x02},
	{0xB2, 0x02},
	{0xB3, 0x07},
	{0xB4, 0xf0},
	{0xB5, 0x05},
	{0xB6, 0xf0},

	{0xf1, 0x07},
	{0xf2, 0x01},
};

static struct reg_tab_bb gc0328_stm_on[] = {
};

static struct reg_tab_bb gc0328_stm_off[] = {
};

static struct reg_tab_bb gc0328_fmt_yuyv[] = {
	{0xfe, 0x00},
	{0x44, 0x02},
};

static struct reg_tab_bb gc0328_fmt_yvyu[] = {
	{0xfe, 0x00},
	{0x44, 0x03},
};

static struct reg_tab_bb gc0328_fmt_uyvy[] = {
	{0xfe, 0x00},
	{0x44, 0x00},
};

static struct reg_tab_bb gc0328_fmt_vyuy[] = {
	{0xfe, 0x00},
	{0x44, 0x01},
};

static struct reg_tab_bb gc0328_res_qcif[] = {
	{0xfe, 0x00},
	{0x4b, 0x8a},
	{0x50, 0x01},
	{0x51, 0x00},
	{0x52, 0x00},
	{0x53, 0x00},
	{0x54, 0x00},
	{0x55, 0x00},
	{0x56, 0x90},
	{0x57, 0x00},
	{0x58, 0xb0},
	{0x59, 0xaa},
	{0x5a, 0x0e},
	{0x5b, 0x04},
	{0x5c, 0x08},
	{0x5d, 0x00},
	{0x5e, 0x00},
	{0x5f, 0x04},
	{0x60, 0x08},
	{0x61, 0x00},
	{0x62, 0x00},
};

static struct reg_tab_bb gc0328_res_cif[] = {
	{0xfe, 0x00},
	{0x4b, 0x8a},
	{0x50, 0x01},
	{0x51, 0x00},
	{0x52, 0x00},
	{0x53, 0x00},
	{0x54, 0x00},
	{0x55, 0x01},
	{0x56, 0x20},
	{0x57, 0x01},
	{0x58, 0x60},
	{0x59, 0x55},
	{0x5a, 0x02},
	{0x5b, 0x02},
	{0x5c, 0x24},
	{0x5d, 0x00},
	{0x5e, 0x00},
	{0x5f, 0x02},
	{0x60, 0x24},
	{0x61, 0x00},
	{0x62, 0x00},
};

static struct reg_tab_bb gc0328_res_hqvga[] = {
	{0xfe, 0x00},
	{0x4b, 0x8a},
	{0x50, 0x01},
	{0x51, 0x00},
	{0x52, 0x00},
	{0x53, 0x00},
	{0x54, 0x00},
	{0x55, 0x00},
	{0x56, 0xa0},
	{0x57, 0x00},
	{0x58, 0xf0},
	{0x59, 0x22},
	{0x5a, 0x03},
	{0x5b, 0x00},
	{0x5c, 0x00},
	{0x5d, 0x00},
	{0x5e, 0x00},
	{0x5f, 0x00},
	{0x60, 0x00},
	{0x61, 0x00},
	{0x62, 0x00},
};

static struct reg_tab_bb gc0328_res_qvga[] = {
	{0xfe, 0x00},
	{0x4b, 0x8a},
	{0x50, 0x01},
	{0x51, 0x00},
	{0x52, 0x00},
	{0x53, 0x00},
	{0x54, 0x00},
	{0x55, 0x00},
	{0x56, 0xf0},
	{0x57, 0x01},
	{0x58, 0x40},
	{0x59, 0x22},
	{0x5a, 0x03},
	{0x5b, 0x00},
	{0x5c, 0x00},
	{0x5d, 0x00},
	{0x5e, 0x00},
	{0x5f, 0x00},
	{0x60, 0x00},
	{0x61, 0x00},
	{0x62, 0x00},
};

static struct reg_tab_bb gc0328_res_vga[] = {
	{0xfe, 0x00},
	{0x4b, 0x8b},
	{0x50, 0x01},
	{0x51, 0x00},
	{0x52, 0x00},
	{0x53, 0x00},
	{0x54, 0x00},
	{0x55, 0x01},
	{0x56, 0xe0},
	{0x57, 0x02},
	{0x58, 0x80},
	{0x59, 0x11},
	{0x5a, 0x02},
	{0x5b, 0x00},
	{0x5c, 0x00},
	{0x5d, 0x00},
	{0x5e, 0x00},
	{0x5f, 0x00},
	{0x60, 0x00},
	{0x61, 0x00},
	{0x62, 0x00},
};

/**************************** register section end ****************************/

enum {
	GC0328_PROP_INIT,		/* Initialize sequence */
	GC0328_PROP_STM,		/* Stream on/off */
	GC0328_PROP_FMT,		/* Output format */
	GC0328_PROP_RES,		/* Output resolution */
	GC0328_PROP_END,
};

enum {
	GC0328_INIT_REQ	= 0,
	GC0328_INIT_DONE,
	GC0328_INIT_END,	/* don't use it*/
};

enum {
	GC0328_STM_OFF	= 0,
	GC0328_STM_ON,
	GC0328_STM_END,	/* don't use it*/
};

enum {
	GC0328_FMT_YUYV	= 0,
	GC0328_FMT_YVYU,
	GC0328_FMT_UYVY,
	GC0328_FMT_VYUY,
	GC0328_FMT_END,	/* don't use it*/
};

enum {
	GC0328_RES_QCIF = 0,
	GC0328_RES_HQVGA,
	GC0328_RES_QVGA,
	GC0328_RES_CIF,
	GC0328_RES_VGA,
	GC0328_RES_END,	/* don't use it*/
};


enum {
	GC0328_ST_INVALID	= 0, /* place holder, don't use 0 as state id*/
	GC0328_ST_UYVY_QCIF,
	GC0328_ST_UYVY_CIF,
	GC0328_ST_UYVY_HQVGA,
	GC0328_ST_UYVY_QVGA,
	GC0328_ST_UYVY_VGA,
	GC0328_ST_END,	/* don't use it*/
};

static struct ecs_default_fmt_info gc0328_fmt_info_table[] = {
	[GC0328_FMT_YUYV] = {
		.code	= V4L2_MBUS_FMT_YUYV8_2X8,
		.clrspc	= V4L2_COLORSPACE_JPEG,
		.fourcc	= V4L2_PIX_FMT_YUYV,
	},
	[GC0328_FMT_YVYU] = {
		.code	= V4L2_MBUS_FMT_YVYU8_2X8,
		.clrspc	= V4L2_COLORSPACE_JPEG,
		.fourcc	= V4L2_PIX_FMT_YVYU,
	},
	[GC0328_FMT_UYVY] = {
		.code	= V4L2_MBUS_FMT_UYVY8_2X8,
		.clrspc	= V4L2_COLORSPACE_JPEG,
		.fourcc	= V4L2_PIX_FMT_UYVY,
	},
	[GC0328_FMT_VYUY] = {
		.code	= V4L2_MBUS_FMT_VYUY8_2X8,
		.clrspc	= V4L2_COLORSPACE_JPEG,
		.fourcc	= V4L2_PIX_FMT_VYUY,
	},
};

static struct ecs_default_res_info gc0328_res_info_table[] = {
	[GC0328_RES_QCIF] = {
		.h_act = 176,
		.v_act = 144,
	},
	[GC0328_RES_HQVGA] = {
		.h_act = 240,
		.v_act = 160,
	},
	[GC0328_RES_QVGA] = {
		.h_act = 320,
		.v_act = 240,
	},
	[GC0328_RES_CIF] = {
		.h_act = 352,
		.v_act = 288,
	},
	[GC0328_RES_VGA] = {
		.h_act = 640,
		.v_act = 480,
	},
};

#define GC0328_DECLARE_INIT_SETTING(VAL, val) \
	__DECLARE_SETTING(GC0328, gc0328, INIT, init, VAL, val)
static struct ecs_setting gc0328_init_stn_table[GC0328_INIT_END] = {
	GC0328_DECLARE_INIT_SETTING(REQ, req),
	GC0328_DECLARE_INIT_SETTING(DONE, done),
};

#define GC0328_DECLARE_STM_SETTING(VAL, val) \
	__DECLARE_SETTING(GC0328, gc0328, STM, stm, VAL, val)
static struct ecs_setting gc0328_stm_stn_table[GC0328_STM_END] = {
	GC0328_DECLARE_STM_SETTING(OFF, off),
	GC0328_DECLARE_STM_SETTING(ON, on),
};

#define GC0328_DECLARE_FMT_SETTING(VAL, val) \
	__DECLARE_SETTING_VS_INFO(GC0328, gc0328, FMT, fmt, VAL, val)
static struct ecs_setting gc0328_fmt_stn_table[GC0328_FMT_END] = {
	GC0328_DECLARE_FMT_SETTING(YUYV, yuyv),
	GC0328_DECLARE_FMT_SETTING(YVYU, yvyu),
	GC0328_DECLARE_FMT_SETTING(UYVY, uyvy),
	GC0328_DECLARE_FMT_SETTING(VYUY, vyuy),
};

#define GC0328_DECLARE_RES_SETTING(VAL, val) \
	__DECLARE_SETTING_VS_INFO(GC0328, gc0328, RES, res, VAL, val)
static struct ecs_setting gc0328_res_stn_table[GC0328_RES_END] = {
	GC0328_DECLARE_RES_SETTING(QCIF, qcif),
	GC0328_DECLARE_RES_SETTING(HQVGA, hqvga),
	GC0328_DECLARE_RES_SETTING(QVGA, qvga),
	GC0328_DECLARE_RES_SETTING(CIF,	cif),
	GC0328_DECLARE_RES_SETTING(VGA, vga),
};

static struct ecs_property gc0328_property_table[GC0328_PROP_END] = {
	[GC0328_PROP_INIT] = {
		.name		= "INITIALIZE",
		.id		= GC0328_PROP_INIT,
		.stn_tab	= gc0328_init_stn_table,
		.stn_num	= GC0328_INIT_END,
		.reg_low	= 0,
		.reg_high	= 0,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
	[GC0328_PROP_STM] = {
		.name		= "STREAM",
		.id		= GC0328_PROP_STM,
		.stn_tab	= gc0328_stm_stn_table,
		.stn_num	= GC0328_STM_END,
		.reg_low	= 0,
		.reg_high	= 0,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
	[GC0328_PROP_FMT] = {
		.name		= "FORMAT",
		.id		= GC0328_PROP_FMT,
		.stn_tab	= gc0328_fmt_stn_table,
		.stn_num	= GC0328_FMT_END,
		.reg_low	= 0,
		.reg_high	= 0,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
	[GC0328_PROP_RES] = {
		.name		= "RESOLUTION",
		.id		= GC0328_PROP_RES,
		.stn_tab	= gc0328_res_stn_table,
		.stn_num	= GC0328_RES_END,
		.reg_low	= 0,
		.reg_high	= 0,
		.speculate	= 1,
		.value_now	= UNSET,
		.cfg_handler	= NULL,
	},
};

/*********************************** state ***********************************/
/* Default global init sequence */
static struct ecs_state_cfg gc0328_state_uyvy_qcif[] = {
	{GC0328_PROP_FMT,	GC0328_FMT_UYVY},
	{GC0328_PROP_RES,	GC0328_RES_QCIF},
};

static struct ecs_state_cfg gc0328_state_uyvy_cif[] = {
	{GC0328_PROP_FMT,	GC0328_FMT_UYVY},
	{GC0328_PROP_RES,	GC0328_RES_CIF},
};

static struct ecs_state_cfg gc0328_state_uyvy_hqvga[] = {
	{GC0328_PROP_FMT,	GC0328_FMT_UYVY},
	{GC0328_PROP_RES,	GC0328_RES_HQVGA},
};

static struct ecs_state_cfg gc0328_state_uyvy_qvga[] = {
	{GC0328_PROP_FMT,	GC0328_FMT_UYVY},
	{GC0328_PROP_RES,	GC0328_RES_QVGA},
};

static struct ecs_state_cfg gc0328_state_uyvy_vga[] = {
	{GC0328_PROP_FMT,	GC0328_FMT_UYVY},
	{GC0328_PROP_RES,	GC0328_RES_VGA},
};


#define GC0328_DECLARE_STATE(VAL, val) \
	__DECLARE_STATE(GC0328, gc0328, VAL, val)
static struct ecs_state gc0328_state_table[GC0328_ST_END] = {
	GC0328_DECLARE_STATE(UYVY_QCIF, uyvy_qcif),
	GC0328_DECLARE_STATE(UYVY_CIF, uyvy_cif),
	GC0328_DECLARE_STATE(UYVY_QVGA, uyvy_qvga),
	GC0328_DECLARE_STATE(UYVY_HQVGA, uyvy_hqvga),
	GC0328_DECLARE_STATE(UYVY_VGA, uyvy_vga),
};

static struct x_i2c gc0328_xic = {
	.ident_addr	= {0xf0},
	.ident_mask	= {0xFF},
	.ident_data	= {0x9d},
	.ident_regs	= 1,
	.reset_addr	= 0xFE,
	.reset_mask	= 0x80,
	.read		= xic_read_bb,
	.write		= xic_write_bb,
	.write_array	= xic_write_array_bb,
	.write_burst	= xic_write_burst_bb,
	.detect		= xic_detect_bb,
};

/* This struct is acually the code to instantize ECS to gc0328 driver */
static struct ecs_sensor generic_gc0328 = {
	.name		= "gc0328",
	.speculate	= 1,
	.prop_tab	= gc0328_property_table,
	.prop_num	= GC0328_PROP_END,
	.state_tab	= gc0328_state_table,
	.state_num	= GC0328_ST_END,
	.state_now	= UNSET,
	.hw_ctx		= &gc0328_xic,
};

/* x_subdev related */
/* The supported format*resolutions mapping table */
static struct v4l2_mbus_framefmt gc0328_fmt_map[GC0328_ST_END];
static int gc0328_enum_map[GC0328_FMT_END * 2];

struct v4l2_subdev_video_ops gc0328_video_ops = {

};

struct v4l2_subdev_ops gc0328_ops = {
	.video	= &gc0328_video_ops,
};

static __attribute__((unused)) int gc0328_state_list[] = {
	GC0328_ST_UYVY_QCIF,
	GC0328_ST_UYVY_HQVGA,
	GC0328_ST_UYVY_QVGA,
	GC0328_ST_UYVY_CIF,
	GC0328_ST_UYVY_VGA,
};

static struct x_subdev gc0328_xsd = {
	.ecs		= &generic_gc0328,
	.ops		= &gc0328_ops,	/* Contain specialized functions only */
	.cid_list	= NULL,
	.cid_cnt	= 0,
	.state_map	= gc0328_fmt_map,
	.state_cnt	= ARRAY_SIZE(gc0328_state_list),
	.state_list = gc0328_state_list,
	.enum_map	= gc0328_enum_map,
	.init_id	= GC0328_PROP_INIT,
	.fmt_id		= GC0328_PROP_FMT,
	.res_id		= GC0328_PROP_RES,
	.str_id		= GC0328_PROP_STM,
	.ifc_id		= UNSET,
	.get_fmt_code	= &xsd_default_get_fmt_code,
	.get_res_desc	= &xsd_default_get_res_desc,
};

/************************* Finally the big data boss *************************/
static const struct xsd_driver_id gc0328_drv_table[] = {
	{
		.name		= "gc0328",
		.prototype	= &gc0328_xsd,
	},
	/* TODO: add more driver structure above this end mark */
	{},
};

#endif
