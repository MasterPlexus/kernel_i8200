#ifndef __S6E63M0_H__
#define __S6E63M0_H__

#include <mach/pxa168fb.h>

extern void s6e63m0_gamma_set(void);
extern int pxa168fb_reinit(struct pxa168fb_info *fbi);

#define GPIO18_LCD_RESET (18)
#define LCD_ESD_RECOVERY
#define LCD_ESD_INTERVAL	(5000)
#define ESD_DET_GPIO19 mfp_to_gpio(GPIO019_GPIO_19)
 
#define LP_MODE	(1)
#define HS_MODE (0)

#define S6E63M0_SLEEP_OUT_DELAY (120)
#define S6E63M0_DISP_ON_DELAY (10)
#define S6E63M0_DISP_OFF_DELAY (10)
#define S6E63M0_SLEEP_IN_DELAY (120)

#define MTP_DATA_LEN 21
#define MAX_GAMMA_VALUE 24
#define SMART_DIMMING 1

#define S6E63M0_REG_ID_1 0xDA
#define S6E63M0_REG_ID_2 0xDB
#define S6E63M0_REG_ID_3 0xDC

#define ID_VALUE_M2			0xA4
#define ID_VALUE_SM2		0xB4
#define ID_VALUE_SM2_1		0xB6

static char pkt_size_mtp_cmd[] = {21};
static char read_mtp[] = {0xD3};

static struct dsi_cmd_desc hx8369b_video_read_mtp_cmds[] = {
	{DSI_DI_SET_MAX_PKT_SIZE, HS_MODE, 0, sizeof(pkt_size_mtp_cmd),
		pkt_size_mtp_cmd},
	{DSI_DI_DCS_READ, HS_MODE, 0, sizeof(read_mtp), read_mtp},
};

static u8 level2_comma_set[] = {
	0xF0,
	0x5A, 0x5A,
};

static u8 key_command_set[] = {
	0xF1,
	0x5A, 0x5A,
};

/*need from 0x43 to 0x0f(pluse width minimum 400ns)*/
static u8 seq_contention_error_check[] = {
	0xD5,
	0xE7, 0x14, 0x60, 0x17, 0x0A,
	0x49, 0xC3, 0x8F, 0x19, 0x64,
	0x91, 0x84, 0x76, 0x20, 0x0F, 0x00,
};

static u8 gamma_set_300cd[] = {
	0xFA,
	0x02, 0x31, 0x00, 0x4F, 0x14,
	0x6E, 0x00, 0xA3, 0xC0, 0x92,
	0xA4, 0xBA, 0x93, 0xBD, 0xC8,
	0xAF, 0x00, 0xB0, 0x00, 0xA2,
	0x00, 0xD1,
};

/* Gamma tables */
static u8 DCS_CMD_SEQ_GAMMA_SM2_300CD[] = {
	0xFA,
	0x02, 0x31, 0x00, 0x4F, 0x14,
	0x6E, 0x00, 0xA3, 0xC0, 0x92,
	0xA4, 0xBA, 0x93, 0xBD, 0xC8,
	0xAF, 0x00, 0xB0, 0x00, 0xA2,
	0x00, 0xD1,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_250CD[] = {
	0xFA,
	0x02, 0x31, 0x00, 0x4F, 0x01,
	0x66, 0x00, 0xA3, 0xC0, 0x95,
	0xA8, 0xBA, 0x92, 0xBD, 0xCC,
	0xB2, 0x00, 0x9D, 0x00, 0x93,
	0x00, 0xBB,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_240CD[] = {
	0xFA,
	0x02, 0x31, 0x00, 0x4F, 0x00,
	0x66, 0x00, 0xA4, 0xC0, 0x95,
	0xA7, 0xBB, 0x92, 0xBF, 0xCC,
	0xB3, 0x00, 0x9B, 0x00, 0x91,
	0x00, 0xB8,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_230CD[] = {
	0xFA,
	0x02, 0x31, 0x00, 0x4F, 0x00,
	0x66, 0x00, 0xA4, 0xC0, 0x95,
	0xA6, 0xBB, 0x92, 0xC1, 0xCC,
	0xB3, 0x00, 0x98, 0x00, 0x8F,
	0x00, 0xB5,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_220CD[] = {
	0xFA,
	0x02, 0x31, 0x00, 0x4F, 0x00,
	0x65, 0x00, 0xA4, 0xC0, 0x95,
	0xA7, 0xBC, 0x94, 0xC0, 0xCD,
	0xB2, 0x00, 0x96, 0x00, 0x8C,
	0x00, 0xB2,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_210CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x65, 0x00, 0x9D, 0xBF, 0x96,
	0xA5, 0xBD, 0x93, 0xBD, 0xCE,
	0xB4, 0x00, 0x93, 0x00, 0x8A,
	0x00, 0xAF,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_200CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x62, 0x00, 0x9C, 0xC1, 0x97,
	0xA3, 0xBD, 0x93, 0xC0, 0xCE,
	0xB4, 0x00, 0x90, 0x00, 0x87,
	0x00, 0xAC,
};

static u8  DCS_CMD_SEQ_GAMMA_SM2_190CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x5F, 0x00, 0x9E, 0xC1, 0x97,
	0xA3, 0xBE, 0x96, 0xBF, 0xCE,
	0xB2, 0x00, 0x8D, 0x00, 0x84,
	0x00, 0xA8,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_180CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x5F, 0x00, 0x9C, 0xC1, 0x98,
	0xA4, 0xBE, 0x96, 0xBF, 0xCF,
	0xB4, 0x00, 0x8A, 0x00, 0x81,
	0x00, 0xA5,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_170CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x5E, 0x00, 0x9C, 0xC2, 0x99,
	0xA5, 0xBE, 0x95, 0xC1, 0xD0,
	0xB6, 0x00, 0x87, 0x00, 0x7F,
	0x00, 0xA1,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_160CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x5A, 0x00, 0x9C, 0xC2, 0x9A,
	0xA5, 0xBE, 0x95, 0xC1, 0xD0,
	0xB6, 0x00, 0x83, 0x00, 0x7C,
	0x00, 0x9F,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_150CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x58, 0x00, 0x9D, 0xC3, 0x9B,
	0xA5, 0xBF, 0x95, 0xC3, 0xD1,
	0xB6, 0x00, 0x80, 0x00, 0x79,
	0x00, 0x9A,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_140CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x56, 0x00, 0x9D, 0xC4, 0x9B,
	0xA5, 0xBF, 0x97, 0xC3, 0xD1,
	0xB6, 0x00, 0x7D, 0x00, 0x75,
	0x00, 0x96,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_130CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x53, 0x00, 0x9E, 0xC5, 0x9C,
	0xA6, 0xC0, 0x98, 0xC2, 0xD2,
	0xB6, 0x00, 0x7A, 0x00, 0x72,
	0x00, 0x91,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_120CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x4F, 0x00, 0x9E, 0xC5, 0x9E,
	0xA6, 0xC0, 0x98, 0xC2, 0xD2,
	0xB7, 0x00, 0x77, 0x00, 0x6E,
	0x00, 0x8C,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_110CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x4B, 0x00, 0x9E, 0xC6, 0x9F,
	0xA6, 0xC1, 0x98, 0xC3, 0xD4,
	0xB9, 0x00, 0x73, 0x00, 0x6B,
	0x00, 0x88,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_100CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x45, 0x00, 0x9D, 0xC7, 0x9F,
	0xA7, 0xC1, 0x98, 0xC3, 0xD4,
	0xB9, 0x00, 0x6F, 0x00, 0x67,
	0x00, 0x84,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_90CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x3F, 0x00, 0x9D, 0xC8, 0xA1,
	0xA7, 0xC3, 0x99, 0xC4, 0xD5,
	0xB9, 0x00, 0x6B, 0x00, 0x63,
	0x00, 0x7F,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_80CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x37, 0x00, 0x9C, 0xC8, 0xA1,
	0xA8, 0xC3, 0x99, 0xC5, 0xD6,
	0xBA, 0x00, 0x66, 0x00, 0x5E,
	0x00, 0x79,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_70CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x30, 0x00, 0x9B, 0xC9, 0x9F,
	0xA8, 0xC4, 0x9B, 0xC6, 0xD7,
	0xBC, 0x00, 0x61, 0x00, 0x5A,
	0x00, 0x73,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_60CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x29, 0x00, 0x9B, 0xC7, 0x98,
	0xA8, 0xC5, 0x9D, 0xC7, 0xD7,
	0xBC, 0x00, 0x5B, 0x00, 0x55,
	0x00, 0x6B,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_50CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x24, 0x00, 0x99, 0xC7, 0x97,
	0xA7, 0xC7, 0xA0, 0xC8, 0xD8,
	0xBC, 0x00, 0x55, 0x00, 0x4F,
	0x00, 0x66,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_40CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x19, 0x00, 0x99, 0xC7, 0x93,
	0xA9, 0xC8, 0xA4, 0xC8, 0xD9,
	0xBC, 0x00, 0x4E, 0x00, 0x49,
	0x00, 0x5E,
};

static u8 DCS_CMD_SEQ_GAMMA_SM2_30CD[] = {
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,
};

static const u8 SEQ_ACL_OFF_DSI[] = {
	0xC0,
	0x00,
};

static const u8 SEQ_ACL_ON_DSI[] = {
    0xC0,
    0x01,
};

static const u8 SEQ_ACL_NULL_DSI[] = {
    0xC1,
    0x00,   0x00,	0x00,	0x00,
    0x00,   0x00,	0x00,	0x00,
    0x00,   0x00,	0x00,	0x00,
    0x00,   0x00,	0x00,	0x00,
    0x00,   0x00,	0x00,	0x00,
    0x00,   0x00,	0x00,	0x00,
    0x00,   0x00,	0x00,
};

static const u8 SEQ_ACL_40P_DSI[] = {
    0xC1,
    0x4D,   0x96,	0x1D,	0x00,
    0x00,   0x01,	0xDF,	0x00,
    0x00,   0x03,	0x1F,	0x00,
    0x00,   0x00,	0x00,	0x00,
    0x01,   0x06,	0x0C,	0x11,
    0x16,   0x1C,	0x21,	0x26,
    0x2B,   0x31,	0x36,

};


static const u8 SEQ_ACL_43P_DSI[] = {
    0xC1,
    0x4D,   0x96,	0x1D,	0x00,
    0x00,   0x01,	0xDF,	0x00,
    0x00,   0x03,	0x1F,	0x00,
    0x00,   0x00,	0x00,	0x00,
    0x01,   0x07,	0x0C,	0x12,
    0x18,   0x1E,	0x23,	0x29,
    0x2F,   0x34,	0x3A,

};

static const u8 SEQ_ACL_45P_DSI[] = {
    0xC1,
    0x4D,   0x96,	0x1D,	0x00,
    0x00,   0x01,	0xDF,	0x00,
    0x00,   0x03,	0x1F,	0x00,
    0x00,   0x00,	0x00,	0x00,
    0x01,   0x07,	0x0D,	0x13,
    0x19,   0x1F,	0x25,	0x2B,
    0x31,   0x37,	0x3D,
};


static const u8 SEQ_ACL_47P_DSI[] = {
    0xC1,
    0x4D,   0x96,	0x1D,	0x00,
    0x00,   0x01,	0xDF,	0x00,
    0x00,   0x03,	0x1F,	0x00,
    0x00,   0x00,	0x00,	0x00,
    0x01,   0x07,	0x0E,	0x14,
    0x1B,   0x21,	0x27,	0x2E,
    0x34,   0x3B,	0x41,
};

static const u8 SEQ_ACL_48P_DSI[] = {
    0xC1,
    0x4D,	0x96,	0x1D,	0x00,
    0x00,   0x01,	0xDF,	0x00,
    0x00,   0x03,	0x1F,	0x00,
    0x00,   0x00,	0x00,	0x00,
    0x01,   0x08,	0x0E,	0x15,
    0x1B,   0x22,	0x29,	0x2F,
    0x36,   0x3C,	0x43,
};

static const u8 SEQ_ACL_50P_DSI[] = {
    0xC1,
    0x4D,   0x96,	0x1D,	0x00,
    0x00,   0x01,	0xDF,	0x00,
    0x00,   0x03,	0x1F,	0x00,
    0x00,   0x00,	0x00,	0x00,
    0x01,   0x08,	0x0F,	0x16,
    0x1D,   0x24,	0x2A,	0x31,
    0x38,   0x3F,	0x46,
};


static u8 DCS_CMD_SEQ_ELVSS_SET[] = {
	0xB2,
    0x10, 0x10, 0x10, 0x10,
};


static const u8 DCS_CMD_SEQ_ELVSS_ON[] = {
    0xB1,
    0x0B,
};

static u8 gamma_update[] = {
	0xFA,
	0x03,
};

static u8 elvss_cond_set[] = {
	0xB2,
	0x16, 0x16, 0x16, 0x16,
};

static u8 acl_on[] = {
	0xC0,
	0x01,
};

static u8 panel_cond_set[] = {
	0xF8,
	0x01, 0x2C, 0x2C, 0x07, 0x07,
	0x5F, 0xB3, 0x6D, 0x97, 0x1D,
	0x3A, 0x0F, 0x00, 0x00,
};

static u8 disp_ctrl[] = {
	0xF2,
	0x02, 0x05/*0x03*/, 0x30, 0x10, 0x10,
};

static u8 if_ctrl[] = {
	0xF7,
	0x03, 0x00, 0x00,
};


static u8 src_ctrl[] = {
	0xF6,
	0x00, 0x8E, 0x0F,
};

static u8 pentile_1[] = {
	0xB3,
	0x6C,
};

static u8 gamma_delta_y_red[] = {
	0xB5,
	0x2C, 0x12, 0x0C, 0x0A, 0x10,
	0x0E, 0x17, 0x13, 0x1F, 0x1A,
	0x2A, 0x24, 0x1F, 0x1B, 0x1A,
	0x17, 0x2B, 0x26, 0x22, 0x20,
	0x3A, 0x34, 0x30, 0x2C, 0x29,
	0x26, 0x25, 0x23, 0x21, 0x20,
	0x1E, 0x1E,
};

static u8 gamma_delta_x_red[] = {
	0xB6,
	0x00, 0x00, 0x11, 0x22, 0x33,
	0x44, 0x44, 0x44, 0x55, 0x55,
	0x66, 0x66, 0x66, 0x66, 0x66,
	0x66,
};

static u8 gamma_delta_y_green[] = {
	0xB7,
	0x2C, 0x12, 0x0C, 0x0A, 0x10,
	0x0E, 0x17, 0x13, 0x1F, 0x1A,
	0x2A, 0x24, 0x1F, 0x1B, 0x1A,
	0x17, 0x2B, 0x26, 0x22, 0x20,
	0x3A, 0x34, 0x30, 0x2C, 0x29,
	0x26, 0x25, 0x23, 0x21, 0x20,
	0x1E, 0x1E,
};

static u8 gamma_delta_x_green[] = {
	0xB8,
	0x00, 0x00, 0x11, 0x22, 0x33,
	0x44, 0x44, 0x44, 0x55, 0x55,
	0x66, 0x66, 0x66, 0x66, 0x66,
	0x66,
};

static u8 gamma_delta_y_blue[] = {
	0xB9,
	0x2C, 0x12, 0x0C, 0x0A, 0x10,
	0x0E, 0x17, 0x13, 0x1F, 0x1A,
	0x2A, 0x24, 0x1F, 0x1B, 0x1A,
	0x17, 0x2B, 0x26, 0x22, 0x20,
	0x3A, 0x34, 0x30, 0x2C, 0x29,
	0x26, 0x25, 0x23, 0x21, 0x20,
	0x1E, 0x1E,
};

static u8 gamma_delta_x_blue[] = {
	0xBA,
	0x00, 0x00, 0x11, 0x22, 0x33,
	0x44, 0x44, 0x44, 0x55, 0x55,
	0x66, 0x66, 0x66, 0x66, 0x66,
	0x66,
};

static u8 elvss_con[] = {
	0xB1,
	0x0B,
};

static u8 s6e63m0_exit_sleep[] = {0x11, 0x00};
static u8 s6e63m0_display_on[] = {0x29, 0x00};
static u8 s6e63m0_display_off[] = {0x28, 0x00};
static u8 s6e63m0_enter_sleep[] = {0x10, 0x00};

static struct dsi_cmd_desc s6e63m0_l2_mtp_key_enable_seq[] = {

	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(level2_comma_set), level2_comma_set},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(key_command_set), key_command_set}
};

static struct dsi_cmd_desc s6e63m0_acl_on_seq[] = {
	{DSI_DI_DCS_SWRITE1, HS_MODE, 0, sizeof(SEQ_ACL_ON_DSI), SEQ_ACL_ON_DSI}
};

static struct dsi_cmd_desc s6e63m0_acl_off_seq[] = {
	{DSI_DI_DCS_SWRITE1, HS_MODE, 0, sizeof(SEQ_ACL_OFF_DSI), SEQ_ACL_OFF_DSI}
};

static struct dsi_cmd_desc s6e63m0_panel_cond_set_seq[] = {
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(panel_cond_set), panel_cond_set}
};

static struct dsi_cmd_desc s6e63m0_disp_cond_set_seq[] = {
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(disp_ctrl), disp_ctrl},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(if_ctrl), if_ctrl}
};

static struct dsi_cmd_desc s6e63m0_etc_cond_set_seq[] = {
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(src_ctrl), src_ctrl},
	{DSI_DI_DCS_SWRITE1, HS_MODE, 0, sizeof(pentile_1), pentile_1},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_delta_y_red), gamma_delta_y_red},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_delta_x_red), gamma_delta_x_red},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_delta_y_green), gamma_delta_y_green},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_delta_x_green), gamma_delta_x_green},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_delta_y_blue), gamma_delta_y_blue},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_delta_x_blue), gamma_delta_x_blue},
};

static struct dsi_cmd_desc s6e63m0_elvss_on_seq[] = {
	{DSI_DI_DCS_SWRITE1, HS_MODE, 0, sizeof(DCS_CMD_SEQ_ELVSS_ON), DCS_CMD_SEQ_ELVSS_ON},
};

static struct dsi_cmd_desc s6e63m0_elvss_set[] = {
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(DCS_CMD_SEQ_ELVSS_SET), DCS_CMD_SEQ_ELVSS_SET},
	{DSI_DI_DCS_SWRITE1, HS_MODE, 0, sizeof(DCS_CMD_SEQ_ELVSS_ON), DCS_CMD_SEQ_ELVSS_ON},
};

static struct dsi_cmd_desc s6e63m0_init_table[] = {
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(level2_comma_set), level2_comma_set},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(key_command_set), key_command_set},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(seq_contention_error_check), seq_contention_error_check},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(panel_cond_set), panel_cond_set},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(disp_ctrl), disp_ctrl},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(if_ctrl), if_ctrl},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(src_ctrl), src_ctrl},
	{DSI_DI_DCS_SWRITE1, HS_MODE, 0, sizeof(pentile_1), pentile_1},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_delta_y_red), gamma_delta_y_red},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_delta_x_red), gamma_delta_x_red},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_delta_y_green), gamma_delta_y_green},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_delta_x_green), gamma_delta_x_green},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_delta_y_blue), gamma_delta_y_blue},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_delta_x_blue), gamma_delta_x_blue},
};

static struct dsi_cmd_desc s6e63m0_contention_error_table[] = {
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(seq_contention_error_check), seq_contention_error_check},
};
static struct dsi_cmd_desc s6e63m0_static_Gamma300[] = {
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_set_300cd), gamma_set_300cd},
};

static struct dsi_cmd_desc s6e63m0_display_on_table[] = {
	{DSI_DI_DCS_SWRITE, HS_MODE, S6E63M0_SLEEP_OUT_DELAY, sizeof(s6e63m0_exit_sleep), s6e63m0_exit_sleep},
	{DSI_DI_DCS_SWRITE, HS_MODE, S6E63M0_DISP_ON_DELAY, sizeof(s6e63m0_display_on), s6e63m0_display_on},
};

static struct dsi_cmd_desc s6e63m0_display_off_table[] = {
	{DSI_DI_DCS_SWRITE, HS_MODE, S6E63M0_DISP_OFF_DELAY, sizeof(s6e63m0_display_off), s6e63m0_display_off},
	{DSI_DI_DCS_SWRITE, HS_MODE, S6E63M0_SLEEP_IN_DELAY, sizeof(s6e63m0_enter_sleep), s6e63m0_enter_sleep},
};

/*Brightness level*/

#define DEFAULT_GAMMA_LEVEL		14/*180cd*/
#define MIN_BRIGHTNESS			0
#define MAX_BRIGHTNESS_LEVEL		255
#define MID_BRIGHTNESS_LEVEL		180
#define LOW_BRIGHTNESS_LEVEL		20
#define DIM_BRIGHTNESS_LEVEL		20
#define DEFAULT_BRIGHTNESS		MID_BRIGHTNESS_LEVEL
#define ELVSS_SET_START_IDX 1
#define ELVSS_SET_END_IDX 4

static u8 acl_set_update[] = {
    0xC1,
    0x4D, 0x96,	0x1D, 0x00, 0x00, 0x01,	0xDF, 0x00, 0x00, 0x03,	0x1F, 0x00, 0x00, 0x00,	0x00, 0x00, 0x01, 0x06,	0x0C, 0x11, 0x16, 0x1C,	0x21, 0x26, 0x2B, 0x31,	0x36,
};

static struct dsi_cmd_desc s6e63m0_acl_on_set_seq[] = {
	{DSI_DI_DCS_SWRITE1, HS_MODE, 0, sizeof(SEQ_ACL_ON_DSI), SEQ_ACL_ON_DSI},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(acl_set_update), acl_set_update},
};

static struct dsi_cmd_desc s6e63m0_acl_set_seq[] = {
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(acl_set_update), acl_set_update},
};

static u8 acl_set_default[][27] = {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x4D, 0x96, 0x1D, 0x00, 0x00, 0x01, 0xDF, 0x00, 0x00, 0x03, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x0C, 0x11, 0x16, 0x1C, 0x21, 0x26, 0x2B, 0x31, 0x36},
    {0x4D, 0x96, 0x1D, 0x00, 0x00, 0x01, 0xDF, 0x00, 0x00, 0x03, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0C, 0x12, 0x18, 0x1E, 0x23, 0x29, 0x2F, 0x34, 0x3A},
    {0x4D, 0x96, 0x1D, 0x00, 0x00, 0x01, 0xDF, 0x00, 0x00, 0x03, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0D, 0x13, 0x19, 0x1F, 0x25, 0x2B, 0x31, 0x37, 0x3D},
    {0x4D, 0x96, 0x1D, 0x00, 0x00, 0x01, 0xDF, 0x00, 0x00, 0x03, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0E, 0x14, 0x1B, 0x21, 0x27, 0x2E, 0x34, 0x3B, 0x41},
    {0x4D, 0x96, 0x1D, 0x00, 0x00, 0x01, 0xDF, 0x00, 0x00, 0x03, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x0E, 0x15, 0x1B, 0x22, 0x29, 0x2F, 0x36, 0x3C, 0x43},
    {0x4D, 0x96, 0x1D, 0x00, 0x00, 0x01, 0xDF, 0x00, 0x00, 0x03, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x0F, 0x16, 0x1D, 0x24, 0x2A, 0x31, 0x38, 0x3F, 0x46},
};


static u8 gamma_set_update[] = {/*based 180nit*/
	0xFA,
	0x02, 0x39, 0x00, 0x4F, 0x00,
	0x5F, 0x00, 0x9C, 0xC1, 0x98,
	0xA4, 0xBE, 0x96, 0xBF, 0xCF,
	0xB4, 0x00, 0x8A, 0x00, 0x81,
	0x00, 0xA5,
};

static u8 gamma_set_default[][22] = {
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x19, 0x00, 0x99, 0xC7, 0x93,0xA9, 0xC8, 0xA4, 0xC8, 0xD9,0xBC, 0x00, 0x4E, 0x00, 0x49,0x00, 0x5E},/*30cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x19, 0x00, 0x99, 0xC7, 0x93,0xA9, 0xC8, 0xA4, 0xC8, 0xD9,0xBC, 0x00, 0x4E, 0x00, 0x49,0x00, 0x5E},/*40cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x24, 0x00, 0x99, 0xC7, 0x97,0xA7, 0xC7, 0xA0, 0xC8, 0xD8,0xBC, 0x00, 0x55, 0x00, 0x4F,0x00, 0x66},/*50cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x29, 0x00, 0x9B, 0xC7, 0x98,0xA8, 0xC5, 0x9D, 0xC7, 0xD7,0xBC, 0x00, 0x5B, 0x00, 0x55,0x00, 0x6B},/*60cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x30, 0x00, 0x9B, 0xC9, 0x9F,0xA8, 0xC4, 0x9B, 0xC6, 0xD7,0xBC, 0x00, 0x61, 0x00, 0x5A,0x00, 0x73},/*70cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x37, 0x00, 0x9C, 0xC8, 0xA1,0xA8, 0xC3, 0x99, 0xC5, 0xD6,0xBA, 0x00, 0x66, 0x00, 0x5E,0x00, 0x79},/*80cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x3F, 0x00, 0x9D, 0xC8, 0xA1,0xA7, 0xC3, 0x99, 0xC4, 0xD5,0xB9, 0x00, 0x6B, 0x00, 0x63,0x00, 0x7F},/*90cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x45, 0x00, 0x9D, 0xC7, 0x9F,0xA7, 0xC1, 0x98, 0xC3, 0xD4,0xB9, 0x00, 0x6F, 0x00, 0x67,0x00, 0x84},/*100cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x4B, 0x00, 0x9E, 0xC6, 0x9F,0xA6, 0xC1, 0x98, 0xC3, 0xD4,0xB9, 0x00, 0x73, 0x00, 0x6B,0x00, 0x88},/*110cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x4F, 0x00, 0x9E, 0xC5, 0x9E,0xA6, 0xC0, 0x98, 0xC2, 0xD2,0xB7, 0x00, 0x77, 0x00, 0x6E,0x00, 0x8C},/*120cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x53, 0x00, 0x9E, 0xC5, 0x9C,0xA6, 0xC0, 0x98, 0xC2, 0xD2,0xB6, 0x00, 0x7A, 0x00, 0x72,0x00, 0x91},/*130cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x56, 0x00, 0x9D, 0xC4, 0x9B,0xA5, 0xBF, 0x97, 0xC3, 0xD1,0xB6, 0x00, 0x7D, 0x00, 0x75,0x00, 0x96},/*140cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x58, 0x00, 0x9D, 0xC3, 0x9B,0xA5, 0xBF, 0x95, 0xC3, 0xD1,0xB6, 0x00, 0x80, 0x00, 0x79,0x00, 0x9A},/*150cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x5A, 0x00, 0x9C, 0xC2, 0x9A,0xA5, 0xBE, 0x95, 0xC1, 0xD0,0xB6, 0x00, 0x83, 0x00, 0x7C,0x00, 0x9F},/*160cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x5E, 0x00, 0x9C, 0xC2, 0x99,0xA5, 0xBE, 0x95, 0xC1, 0xD0,0xB6, 0x00, 0x87, 0x00, 0x7F,0x00, 0xA1},/*170cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x5F, 0x00, 0x9C, 0xC1, 0x98,0xA4, 0xBE, 0x96, 0xBF, 0xCF,0xB4, 0x00, 0x8A, 0x00, 0x81,0x00, 0xA5},/*180cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x5F, 0x00, 0x9E, 0xC1, 0x97,0xA3, 0xBE, 0x96, 0xBF, 0xCE,0xB2, 0x00, 0x8D, 0x00, 0x84,0x00, 0xA8},/*190cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x62, 0x00, 0x9C, 0xC1, 0x97,0xA3, 0xBD, 0x93, 0xC0, 0xCE,0xB4, 0x00, 0x90, 0x00, 0x87,0x00, 0xAC},/*200cd*/
	{0x02, 0x39, 0x00, 0x4F, 0x00,0x65, 0x00, 0x9D, 0xBF, 0x96,0xA5, 0xBD, 0x93, 0xBD, 0xCE,0xB4, 0x00, 0x93, 0x00, 0x8A,0x00, 0xAF},/*210cd*/
	{0x02, 0x31, 0x00, 0x4F, 0x00,0x65, 0x00, 0xA4, 0xC0, 0x95,0xA7, 0xBC, 0x94, 0xC0, 0xCD,0xB2, 0x00, 0x96, 0x00, 0x8C,0x00, 0xB2},/*220cd*/
	{0x02, 0x31, 0x00, 0x4F, 0x00,0x66, 0x00, 0xA4, 0xC0, 0x95,0xA6, 0xBB, 0x92, 0xC1, 0xCC,0xB3, 0x00, 0x98, 0x00, 0x8F,0x00, 0xB5},/*230cd*/
	{0x02, 0x31, 0x00, 0x4F, 0x00,0x66, 0x00, 0xA4, 0xC0, 0x95,0xA7, 0xBB, 0x92, 0xBF, 0xCC,0xB3, 0x00, 0x9B, 0x00, 0x91,0x00, 0xB8},/*240cd*/
	{0x02, 0x31, 0x00, 0x4F, 0x01,0x66, 0x00, 0xA3, 0xC0, 0x95,0xA8, 0xBA, 0x92, 0xBD, 0xCC,0xB2, 0x00, 0x9D, 0x00, 0x93,0x00, 0xBB},/*250cd*/
	{0x02, 0x31, 0x00, 0x4F, 0x14,0x6E, 0x00, 0xA3, 0xC0, 0x92,0xA4, 0xBA, 0x93, 0xBD, 0xC8,0xAF, 0x00, 0xB0, 0x00, 0xA2,0x00, 0xD1},/*300cd*/
};

static struct dsi_cmd_desc s6e63m0_gamma_set_cmds[] = {
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_set_update),gamma_set_update},
};

static struct dsi_cmd_desc s6e63m0_gamma_update[] = {
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_set_update),gamma_set_update},
	{DSI_DI_DCS_SWRITE1, HS_MODE, 0, sizeof(gamma_update), gamma_update},
};

static struct dsi_cmd_desc s6e63m0_brightness_set_acl_on[] = {
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_set_update),gamma_set_update},
	{DSI_DI_DCS_SWRITE1, HS_MODE, 0, sizeof(gamma_update), gamma_update},
	{DSI_DI_DCS_SWRITE1, HS_MODE, 0, sizeof(SEQ_ACL_ON_DSI), SEQ_ACL_ON_DSI},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(acl_set_update), acl_set_update},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(DCS_CMD_SEQ_ELVSS_SET), DCS_CMD_SEQ_ELVSS_SET},
	{DSI_DI_DCS_SWRITE1, HS_MODE, 0, sizeof(DCS_CMD_SEQ_ELVSS_ON), DCS_CMD_SEQ_ELVSS_ON},
};

static struct dsi_cmd_desc s6e63m0_brightness_set_acl_off[] = {
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(gamma_set_update),gamma_set_update},
	{DSI_DI_DCS_SWRITE1, HS_MODE, 0, sizeof(gamma_update), gamma_update},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(acl_set_update), acl_set_update},
	{DSI_DI_DCS_LWRITE, HS_MODE, 0, sizeof(DCS_CMD_SEQ_ELVSS_SET), DCS_CMD_SEQ_ELVSS_SET},
	{DSI_DI_DCS_SWRITE1, HS_MODE, 0, sizeof(DCS_CMD_SEQ_ELVSS_ON), DCS_CMD_SEQ_ELVSS_ON},
};

static u8 *gamma_table_sm2[] =
{
	DCS_CMD_SEQ_GAMMA_SM2_30CD,
	DCS_CMD_SEQ_GAMMA_SM2_40CD,
	DCS_CMD_SEQ_GAMMA_SM2_50CD,
	DCS_CMD_SEQ_GAMMA_SM2_60CD,
	DCS_CMD_SEQ_GAMMA_SM2_70CD,
	DCS_CMD_SEQ_GAMMA_SM2_80CD,
	DCS_CMD_SEQ_GAMMA_SM2_90CD,
	DCS_CMD_SEQ_GAMMA_SM2_100CD,
	DCS_CMD_SEQ_GAMMA_SM2_110CD,
	DCS_CMD_SEQ_GAMMA_SM2_120CD,
	DCS_CMD_SEQ_GAMMA_SM2_130CD,
	DCS_CMD_SEQ_GAMMA_SM2_140CD,
	DCS_CMD_SEQ_GAMMA_SM2_150CD,
	DCS_CMD_SEQ_GAMMA_SM2_160CD,
	DCS_CMD_SEQ_GAMMA_SM2_170CD,
	DCS_CMD_SEQ_GAMMA_SM2_180CD,
	DCS_CMD_SEQ_GAMMA_SM2_190CD,
	DCS_CMD_SEQ_GAMMA_SM2_200CD,
	DCS_CMD_SEQ_GAMMA_SM2_210CD,
	DCS_CMD_SEQ_GAMMA_SM2_220CD,
	DCS_CMD_SEQ_GAMMA_SM2_230CD,
	DCS_CMD_SEQ_GAMMA_SM2_240CD,
	DCS_CMD_SEQ_GAMMA_SM2_250CD,
	DCS_CMD_SEQ_GAMMA_SM2_300CD
};

enum {
	GAMMA_30CD,
	GAMMA_40CD,
	GAMMA_50CD,
	GAMMA_60CD,
	GAMMA_70CD,
	GAMMA_80CD,
	GAMMA_90CD,
	GAMMA_100CD,
	GAMMA_110CD,
	GAMMA_120CD,
	GAMMA_130CD,
	GAMMA_140CD,
	GAMMA_150CD,
	GAMMA_160CD,
	GAMMA_170CD,
	GAMMA_180CD,
	GAMMA_190CD,
	GAMMA_200CD,
	GAMMA_210CD,
	GAMMA_220CD,
	GAMMA_230CD,
	GAMMA_240CD,
	GAMMA_250CD,
	GAMMA_300CD,
	GAMMA_MAX
};
/* #define MAX_GAMMA_LEVEL	25 */
static const unsigned int candela_table[ ] = {
	 30,  40,  50,  60,  70, 80, 90, 100, 
	110, 120, 130, 140, 150, 160, 170, 180, 190, 200,
	210, 220, 230, 240, 250, 299
};

enum elvss_brightness {
	elvss_not_set,
	elvss_30cd_to_100cd,
	elvss_110cd_to_160cd,
	elvss_170cd_to_200cd,
	elvss_210cd_to_300cd,
};

enum acl_set_value {
    ACL_NULL_DSI = 0,
    ACL_40P_DSI,
    ACL_43P_DSI,
    ACL_45P_DSI,
    ACL_47P_DSI,
    ACL_48P_DSI,
    ACL_50P_DSI,
    ACL_MAX
};
static const u8 stod13cm_elvss_offsets[] = {
	0x00,	/* not set */
	0x0D,	/* 30cd-100cd */
	0x09,	/* 110cd-16-cd */
	0x07,	/* 170cd-200cd */
	0x00,	/* 210cd-300cd */
};

static const u8 default_elvss_offsets[] = {
	0x00,	/* not set */
	0x1D,	/* 30cd-100cd */
	0x17,	/* 110cd-16-cd */
	0x14,	/* 170cd-200cd */
	0x10,	/* 210cd-300cd */
};

#endif	/* __S6E63M0_PARAM_H__ */
